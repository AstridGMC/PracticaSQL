//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 15 15:03:04 CST 2020
//----------------------------------------------------

import java_cup.*;
import java.util.LinkedList;
import PracticaSQL.Backend.*;
import java_cup.runtime.Symbol;
import practicaSQL.Backend.ErrorS;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 15 15:03:04 CST 2020
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\003\000\002\021\007\000" +
    "\002\017\003\000\002\017\004\000\002\017\003\000\002" +
    "\017\004\000\002\023\014\000\002\020\005\000\002\024" +
    "\007\000\002\025\003\000\002\025\004\000\002\004\006" +
    "\000\002\004\010\000\002\005\014\000\002\005\010\000" +
    "\002\006\007\000\002\006\011\000\002\007\005\000\002" +
    "\007\007\000\002\011\005\000\002\011\007\000\002\015" +
    "\003\000\002\015\005\000\002\012\003\000\002\012\007" +
    "\000\002\003\007\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\016" +
    "\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\020\003\013\006\004\024\014\031\011\033" +
    "\007\034\010\042\006\001\002\000\002\001\002\000\004" +
    "\002\uffff\001\002\000\010\002\uffe5\010\122\015\uffe5\001" +
    "\002\000\004\026\102\001\002\000\004\026\076\001\002" +
    "\000\004\026\065\001\002\000\004\012\064\001\002\000" +
    "\004\002\ufffa\001\002\000\002\001\002\000\004\012\025" +
    "\001\002\000\004\002\000\001\002\000\004\012\024\001" +
    "\002\000\004\012\023\001\002\000\004\002\022\001\002" +
    "\000\004\002\001\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\ufffe\001\002\000\004" +
    "\026\027\001\002\000\004\042\030\001\002\000\004\035" +
    "\060\001\002\000\006\012\uffef\027\032\001\002\000\004" +
    "\042\033\001\002\000\014\013\046\020\044\021\045\022" +
    "\043\023\042\001\002\000\010\012\uffe0\036\036\037\037" +
    "\001\002\000\004\012\uffee\001\002\000\004\042\033\001" +
    "\002\000\004\042\033\001\002\000\004\012\uffde\001\002" +
    "\000\004\012\uffdf\001\002\000\006\007\047\017\051\001" +
    "\002\000\006\007\047\017\051\001\002\000\006\007\047" +
    "\017\051\001\002\000\006\007\047\017\051\001\002\000" +
    "\006\007\047\017\051\001\002\000\014\004\uffd7\012\uffd7" +
    "\020\uffd7\036\uffd7\037\uffd7\001\002\000\010\012\uffdd\036" +
    "\uffdd\037\uffdd\001\002\000\004\042\052\001\002\000\004" +
    "\017\053\001\002\000\014\004\uffd8\012\uffd8\020\uffd8\036" +
    "\uffd8\037\uffd8\001\002\000\010\012\uffdc\036\uffdc\037\uffdc" +
    "\001\002\000\010\012\uffdb\036\uffdb\037\uffdb\001\002\000" +
    "\010\012\uffd9\036\uffd9\037\uffd9\001\002\000\010\012\uffda" +
    "\036\uffda\037\uffda\001\002\000\004\042\061\001\002\000" +
    "\014\012\uffe7\014\uffe7\027\uffe7\030\uffe7\035\062\001\002" +
    "\000\004\042\030\001\002\000\012\012\uffe6\014\uffe6\027" +
    "\uffe6\030\uffe6\001\002\000\004\002\ufffc\001\002\000\004" +
    "\042\030\001\002\000\004\014\067\001\002\000\004\042" +
    "\006\001\002\000\004\015\071\001\002\000\006\012\uffec" +
    "\032\072\001\002\000\004\014\073\001\002\000\004\042" +
    "\006\001\002\000\004\015\075\001\002\000\004\012\uffed" +
    "\001\002\000\004\042\030\001\002\000\006\012\uffe9\027" +
    "\100\001\002\000\004\042\033\001\002\000\004\012\uffe8" +
    "\001\002\000\004\042\030\001\002\000\004\030\104\001" +
    "\002\000\004\042\105\001\002\000\004\013\116\001\002" +
    "\000\010\010\112\012\uffe3\027\uffe3\001\002\000\006\012" +
    "\uffeb\027\110\001\002\000\004\042\033\001\002\000\004" +
    "\012\uffea\001\002\000\004\042\105\001\002\000\004\010" +
    "\114\001\002\000\004\042\105\001\002\000\006\012\uffe2" +
    "\027\uffe2\001\002\000\004\017\117\001\002\000\004\042" +
    "\120\001\002\000\004\017\121\001\002\000\010\010\uffe1" +
    "\012\uffe1\027\uffe1\001\002\000\004\042\006\001\002\000" +
    "\006\002\uffe4\015\uffe4\001\002\000\004\020\125\001\002" +
    "\000\006\005\132\021\130\001\002\000\004\021\130\001" +
    "\002\000\004\040\153\001\002\000\004\025\142\001\002" +
    "\000\010\005\132\021\130\040\ufff8\001\002\000\004\011" +
    "\135\001\002\000\010\005\132\021\130\040\ufff6\001\002" +
    "\000\004\040\ufff5\001\002\000\004\013\136\001\002\000" +
    "\006\007\047\017\051\001\002\000\004\020\140\001\002" +
    "\000\004\021\ufff2\001\002\000\004\040\ufff7\001\002\000" +
    "\004\011\143\001\002\000\004\013\144\001\002\000\006" +
    "\007\047\017\051\001\002\000\004\004\146\001\002\000" +
    "\004\013\147\001\002\000\004\043\150\001\002\000\004" +
    "\016\151\001\002\000\004\020\152\001\002\000\012\005" +
    "\ufff4\021\ufff4\040\ufff4\041\ufff4\001\002\000\004\002\ufff9" +
    "\001\002\000\004\041\157\001\002\000\006\021\130\041" +
    "\ufff1\001\002\000\004\041\ufff0\001\002\000\010\005\ufff3" +
    "\021\ufff3\040\ufff3\001\002" });

  /** Access to parse-action table.
     * @return  */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\155\000\020\002\020\004\014\005\016\006\011\007" +
    "\017\015\004\021\015\001\001\000\004\022\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\034\014\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\040\014\033\001\001\000" +
    "\006\013\037\014\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\056\001\001\000\004\016\055\001" +
    "\001\000\004\016\054\001\001\000\004\016\053\001\001" +
    "\000\004\016\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\065\001\001\000\002\001\001\000\004\015\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\076\001\001\000\002\001\001\000" +
    "\006\013\100\014\033\001\001\000\002\001\001\000\004" +
    "\011\102\001\001\000\002\001\001\000\006\003\105\012" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\110\014\033\001\001\000\002\001" +
    "\001\000\004\003\112\001\001\000\002\001\001\000\006" +
    "\003\105\012\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\126\020\132\023\130\024\125\001\001" +
    "\000\006\023\154\025\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\140\020\132\023\130\024\125" +
    "\001\001\000\002\001\001\000\012\017\133\020\132\023" +
    "\130\024\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\154\025\155\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table.
     * @return  */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state.
     * @return  */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production.
     * @return  */
  @Override
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index.
     * @return  */
  @Override
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index.
     * @return  */
  @Override
  public int error_sym() {return 1;}



    LinkedList tablaErroresSintacticos =  new LinkedList();
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        ErrorS error = new ErrorS(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valorCondi ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorCondi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // valorCondi ::= COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorCondi",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condi ::= TEXTO MENORIGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condi ::= TEXTO MAYORIGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condi ::= TEXTO MAYORQ valorCondi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condi ::= TEXTO MENORQ valorCondi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condi ::= TEXTO IGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= condi OR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= condi AND condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= condi 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asign ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asign",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // columnaAsign ::= asign COMA asign COMA columnaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnaAsign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // columnaAsign ::= asign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("columnaAsign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valores ::= TEXTO COMA valores 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // valores ::= TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valores",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // path ::= TEXTO PUNTO TEXTO PUNTO path 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // path ::= TEXTO PUNTO TEXTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // delete ::= ELIMINAR EN path FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // delete ::= ELIMINAR EN path 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // update ::= ACTUALIZAR EN path ASIGNAR columnaAsign FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // update ::= ACTUALIZAR EN path ASIGNAR columnaAsign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("update",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // insert ::= INSERTAR EN path CORCHETEABRE valores CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // insert ::= INSERTAR EN path CORCHETEABRE valores CORCHETECIERRA VALORES CORCHETEABRE valores CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("insert",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // select ::= SELECCIONAR column EN path FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // select ::= SELECCIONAR column EN path 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoCar ::= archivo cuerpoCar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoCar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpoCar ::= archivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoCar",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // carpetaInicio ::= INICIOCAR NOMBRE IGUAL valorCondi MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("carpetaInicio",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // carpeta ::= carpetaInicio cuerpoCar FINCARPETA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("carpeta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // archivo ::= MENORQ ARCHIVO NOMBRE IGUAL valorCondi UBICACION IGUAL PATH DIAGONAL MAYORQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("archivo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= carpeta cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= carpeta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= archivo cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= archivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // documento ::= INICIOPROY nombre MAYORQ cuerpo FINPROYECTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("documento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.syntax_error((Symbol)e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s ::= delete FIN 
            {
              Object RESULT =null;
		System.out.println("has elegido delete");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= update FIN 
            {
              Object RESULT =null;
		 System.out.println("has elegido update");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= insert FIN 
            {
              Object RESULT =null;
		 System.out.println("has elegido insert");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= select FIN 
            {
              Object RESULT =null;
		  System.out.println("has elegido Select");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= valores 
            {
              Object RESULT =null;
		  System.out.println("has elegido texto");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= documento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

