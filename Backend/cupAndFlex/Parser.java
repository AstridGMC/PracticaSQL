
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 14 22:18:47 CST 2020
//----------------------------------------------------

import java_cup.Symbol;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 14 22:18:47 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\004\006\000\002\004\010\000\002\005\014\000" +
    "\002\005\010\000\002\006\007\000\002\006\011\000\002" +
    "\007\005\000\002\007\007\000\002\011\005\000\002\011" +
    "\007\000\002\010\010\000\002\012\003\000\002\012\007" +
    "\000\002\003\007\000\002\013\003\000\002\013\005\000" +
    "\002\013\005\000\002\015\003\000\002\015\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\016\005\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\014\003\011\025\010\032\006\034\004\035" +
    "\005\001\002\000\004\027\112\001\002\000\004\027\106" +
    "\001\002\000\004\027\067\001\002\000\004\012\066\001" +
    "\002\000\004\042\022\001\002\000\004\002\ufffc\001\002" +
    "\000\004\012\021\001\002\000\004\012\020\001\002\000" +
    "\004\012\017\001\002\000\004\002\016\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffd\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\042\061" +
    "\001\002\000\004\027\024\001\002\000\004\042\025\001" +
    "\002\000\004\036\055\001\002\000\006\012\ufffb\030\027" +
    "\001\002\000\004\042\030\001\002\000\014\013\043\021" +
    "\041\022\042\023\040\024\037\001\002\000\010\012\uffed" +
    "\037\033\040\034\001\002\000\004\012\ufffa\001\002\000" +
    "\004\042\030\001\002\000\004\042\030\001\002\000\004" +
    "\012\uffeb\001\002\000\004\012\uffec\001\002\000\006\006" +
    "\044\020\046\001\002\000\006\006\044\020\046\001\002" +
    "\000\006\006\044\020\046\001\002\000\006\006\044\020" +
    "\046\001\002\000\006\006\044\020\046\001\002\000\010" +
    "\012\uffe2\037\uffe2\040\uffe2\001\002\000\010\012\uffe8\037" +
    "\uffe8\040\uffe8\001\002\000\004\042\047\001\002\000\004" +
    "\020\050\001\002\000\010\012\uffe3\037\uffe3\040\uffe3\001" +
    "\002\000\010\012\uffe7\037\uffe7\040\uffe7\001\002\000\010" +
    "\012\uffe6\037\uffe6\040\uffe6\001\002\000\010\012\uffe4\037" +
    "\uffe4\040\uffe4\001\002\000\010\012\uffe5\037\uffe5\040\uffe5" +
    "\001\002\000\004\042\056\001\002\000\014\012\ufff3\015" +
    "\ufff3\030\ufff3\031\ufff3\036\057\001\002\000\004\042\025" +
    "\001\002\000\012\012\ufff2\015\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\004\007\062\001\002\000\004\042\063\001\002" +
    "\000\004\007\064\001\002\000\004\042\022\001\002\000" +
    "\006\016\ufff1\027\ufff1\001\002\000\004\002\ufffe\001\002" +
    "\000\004\042\025\001\002\000\004\015\071\001\002\000" +
    "\004\042\072\001\002\000\010\007\103\016\uffea\042\061" +
    "\001\002\000\004\016\105\001\002\000\004\016\075\001" +
    "\002\000\004\033\076\001\002\000\004\015\077\001\002" +
    "\000\004\042\100\001\002\000\006\007\103\016\uffea\001" +
    "\002\000\004\016\102\001\002\000\004\012\ufff9\001\002" +
    "\000\004\042\100\001\002\000\004\016\uffe9\001\002\000" +
    "\004\012\ufff8\001\002\000\004\042\025\001\002\000\006" +
    "\012\ufff5\030\110\001\002\000\004\042\030\001\002\000" +
    "\004\012\ufff4\001\002\000\004\042\025\001\002\000\004" +
    "\031\114\001\002\000\004\042\116\001\002\000\010\007" +
    "\126\012\ufff0\030\ufff0\001\002\000\004\013\122\001\002" +
    "\000\006\012\ufff7\030\120\001\002\000\004\042\030\001" +
    "\002\000\004\012\ufff6\001\002\000\004\020\123\001\002" +
    "\000\004\042\124\001\002\000\004\020\125\001\002\000" +
    "\010\007\uffee\012\uffee\030\uffee\001\002\000\004\042\116" +
    "\001\002\000\004\007\130\001\002\000\004\042\116\001" +
    "\002\000\006\012\uffef\030\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\127\000\014\002\014\004\011\005\012\006\006\007" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\031\014\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\035\014\030\001\001\000\006\013\034\014\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\053\001\001\000\004\016\052\001\001\000\004\016\051" +
    "\001\001\000\004\016\050\001\001\000\004\016\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\067\001\001\000\002\001\001" +
    "\000\006\010\073\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\106\001" +
    "\001\000\002\001\001\000\006\013\110\014\030\001\001" +
    "\000\002\001\001\000\004\011\112\001\001\000\002\001" +
    "\001\000\006\003\114\012\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\120\014" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\126\001\001\000\002\001\001\000\006\003\114\012\130" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    LinkedList tablaErroresSintacticos =  new LinkedList();
    public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila =  s.right;
        int columna = s.right();
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO RECUPERADO!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        Error error = new Error(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

    public void unrrecovered_syntax_error(Symbo s) throws java.lang.Exception {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        String red="\033[31m"; 
        System.out.println(red + "ERROR SINTACTICO SIN RECUPERACION!! \t\tLexema: " + lexema+ "\t\tFila " + fila +"\t\tColumna: " +columna );
        Error error = new Error(lexema, fila, columna , "error Sintactico");
        tablaErroresSintacticos.add(error);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // valorCondi ::= numero 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCondi",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // valorCondi ::= COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorCondi",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condi ::= TEXTO MENORIGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condi ::= TEXTO MAYORIGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condi ::= TEXTO MAYORQ valorCondi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condi ::= TEXTO MENORQ valorCondi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condi ::= TEXTO IGUAL valorCondi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condi",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // valoresSColumnas ::= TEXTO COMA valoresSColumnas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresSColumnas",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // valoresSColumnas ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valoresSColumnas",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // condicion ::= condi OR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicion ::= condi AND condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicion ::= condi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asign ::= TEXTO IGUAL COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // columnaAsign ::= asign COMA asign COMA columnaAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnaAsign",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // columnaAsign ::= asign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("columnaAsign",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // column ::= TEXTO TEXTO COMA TEXTO COMA column 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("column",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // path ::= TEXTO PUNTO TEXTO PUNTO path 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // path ::= TEXTO PUNTO TEXTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("path",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // delete ::= ELIMINAR EN path FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // delete ::= ELIMINAR EN path 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delete",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // update ::= ACTUALIZAR EN path ASIGNAR columnaAsign FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // update ::= ACTUALIZAR EN path ASIGNAR columnaAsign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // insert ::= INSERTAR EN path CORCHETEABRE valoresSColumnas CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insert",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // insert ::= INSERTAR EN path CORCHETEABRE column CORCHETECIERRA VALORES CORCHETEABRE valoresSColumnas CORCHETECIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("insert",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select ::= SELECCIONAR column EN path FILTRAR condicion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select ::= SELECCIONAR column EN path 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // s ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		parser.syntax_error((Symbol) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= delete FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= update FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= insert FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= select FIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

